3.6.a
Give a complete problem formulation for each of the following. Choose a formulation that is precise enough to be implemented.
	a. Using only 4 colors, you have to color a planar map in such a way that no two adjacent regions have the same color.

		ANSWER:
			regions = regions of planar on board
			We will have an array for each region, the array will hold the numbers of each region that touches it.
			we will have a variable that for the currentRegion we are coloring. 
			We will also have an array for each region that will classify its current color. 
			0 = not colored
			1 = blue
			2 = green
			3 = red
			4 = purple
			All regions will start at 0 for no color
			We will also use an array for regions to add what colors are touching the region, if any
		colorregion = 1;
		//if no color in the region
		If(currentRegion == 0){
			//we will color it
			//first see if we have a neighboor region with or without color
			if((touchesAnotherRegion()){
				//see if neighbor regions have color
				if(NeighborHasColor()){
					if(neighborColors != 2,3,4){
					colorRegion(1);
					}else if(neighborColors != 1,3,4){
						selectedcolor = 2;
						colorRegion(selectedcolor);
					}else if(neighborColors != 2,1,4){
						selectedcolor = 3;
                                                colorRegion(selectedcolor);
					}else if(neighborColors != 2,3,1){
						selectedcolor = 4;
                                                colorRegion(selectedcolor);
					}else{
					System.out.println("we were not successful at coloring our map");
					}
				}
			}
				
		}else{
			searchNextRegion();
			continue;
		}



We will start at an empty planar imagine, if we care how many colors are on the map to make it a "completed" version we can always check if there is 4 spots on the board to color, if not we
would be considered incomplete maybe. Otherwise the code above I believe should go like this:
	we check our currentREgion we are at to ensure we are at a colorless region. If we are we check for neighbors, if we have neighbors we check for any neighboring colors, once we have
	checked all our neighbor colors, we should be able to recognize if we can put one of our 4 colors in the spot. If we are not able to, right now I have a print out error. 
	What I should is a better way to recheck the map to see if I can color the map in another fasion, that would help prevent colors from being next to each other.
 I say this due to the fact that if we have no colors left to put on a region, that does not mean the photo could not be painted with 4 colors. Something we would have to do
in that case is to capture our previous attempt, and make sure that we are not getting stuck in a loop, vs the photo cannot be colored in such a manner. (without knowing or researching
I am not sure if that is possible, to come up with a planar map photo that cannot be completed with only 4 colors, that cannot have a region color, adjacent to another region of the same color. 
